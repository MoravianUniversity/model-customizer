import os
import subprocess
import json
from tempfile import NamedTemporaryFile
from urllib.request import urlretrieve
from urllib.parse import urlparse, unquote
from typing import List, Dict, Any


def get_variables(url: str) -> List[Dict[str, Any]]:
    """
    Generates our JSON format based on a url. Starts by getting the scad file, turning it into json, and then formatting
    it correctly for our database.
    :param url: the url of the scad file
    :return: the final json as a string
    """
    url_parts = urlparse(url)

    # Get the source file
    input_file = None
    try:
        if url_parts.scheme.startswith('http'):
            input_file = NamedTemporaryFile()
            source = input_file.name
            # todo: throw exception if url isn't good
            urlretrieve(url, source)
        elif url_parts.scheme in ('file', ''):
            source = unquote(url_parts.path)
            if not os.path.exists(source):
                raise Exception("Source file does not exist")
        else:
            raise Exception("Unsupported source URL")

        scad_json = scad_to_scad_json(source)
        return scad_json_to_our_json(scad_json)
    finally:
        if input_file is not None:
            input_file.close()


def scad_to_scad_json(input_path: str) -> dict:
    """
    Takes a scad file and returns its customizer json as a string
    :param input_path: the scad file
    :return: the output json as a string
    """
    with NamedTemporaryFile('r', suffix=".param") as tmp:
        subprocess.run(['openscad', input_path, '-o', tmp.name]).check_returncode()
        return json.load(tmp)


def scad_json_to_our_json(scad_json: dict):
    """
    Takes the JSON from the scad file and formats it to our template
    :param scad_json: the JSON generated by scad
    :return: Our JSON as a dict
    """
    # This is the only part of the json that has customizer variables
    scad_json = scad_json['parameters']

    our_json = []
    for current_scad_var in scad_json:
        # the elements attached to every variable
        variable = {
            'name': (current_scad_var['name']),
            'desc': (current_scad_var.get('caption', '')),
            'default': (current_scad_var['initial']),
            'group': (current_scad_var['group']),
        }

        our_json.append(variable)

        # So I can use keys and contains on it
        current_scad_var = dict(current_scad_var)

        # Extra Options
        # Drop Down Menu
        if 'options' in current_scad_var:
            variable['style'] = 'dropdown'
            # todo: ask if this format is okay (no, make it a dict and nicer)
            variable['options'] = current_scad_var['options']

        # TODO: differentiate from numbox
        # Slider
        if 'min' in current_scad_var and 'max' in current_scad_var:
            variable['style'] = 'slider'
            variable['min'] = current_scad_var['min']
            variable['max'] = current_scad_var['max']
            variable['inc'] = current_scad_var['step']

        # Textbox
        if 'maxLength' in current_scad_var:
            variable['style'] = 'textbox'
            variable['max_len'] = current_scad_var['maxLength']

        # Checkbox
        if current_scad_var['type'] == 'boolean':
            variable['style'] = 'checkbox'

    return our_json


print(get_variables('https://drek.cc/dl/example2.scad'))
# print(get_variables('file:///Users/colemans/Courses/3d%20Printing/model-customizer/OpenSCAD_Files/checkbox.scad'))
